class Solution {
    public int findTargetSumWays(int[] nums, int S) {
        if(nums == null || nums.length == 0) {
            return 0;
        }
        
        int[][] cache = new int[nums.length][2001];
        for(int[] row : cache) {
            Arrays.fill(row, Integer.MIN_VALUE);
        }
        
        return dfs(nums, 0, S, 0, cache);
    }
    
    private int dfs(int[] nums, int level, int target, int sum, int[][] cache) {
        if(level == nums.length) {
            if(sum == target) {
                return 1;
            }
            return 0;
        }
        
        if(cache[level][sum + 1000] != Integer.MIN_VALUE) {
            return cache[level][sum + 1000];
        }
        
        int add = dfs(nums, level + 1, target, sum + nums[level], cache);
        int substract = dfs(nums, level + 1, target, sum - nums[level], cache);
        cache[level][sum + 1000] = add + substract;
        return cache[level][sum + 1000];
    }
}
